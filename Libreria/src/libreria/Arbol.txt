//Voy a iniciar desde cero a crear un nodo y una lista enlazada, para adaptarlo luego
public class Nodo{ //creamos clase nodo
  private int dato; //creamos un atributo de Nodo tipo entero llamado dato
  private Nodo siguiente; //creamos un atributo de Nodo tipo Nodo llamado siguiente, que apunta al próximo nodo

  public Nodo(int dato){ //constructor de la clase Nodo, recibe como parámetro al dato
    this.dato = dato; //inicializamos dato
    this.siguiente = null; //inicializamos siguiente a nulo
  }
}

//Voy a crear mi lista enlazada en esta sección, usando mi nodo recién creado
public class ListaEnlazada{ //creamos la clase, lista enlazada
  private Nodo cabeza; //creamos el atributo tipo Nodo llamado cabeza

  public ListaEnlazada(){ //constructor de la clase lista enlazada
    this.cabeza = null; //incializamos cabeza en nulo para indicar que la lista está vacía al principio
  }

  public void insertar(int dato){ //creamos el metodo insertar
    Nodo nuevo = new Nodo(dato);// agregamos el nuevo nodo que vamos a insertar
    
    if(cabeza == null){//Si la lista está vacía
      cabeza = nuevo; //El nodo nuevo se asigna como nodo cabeza
      }
    else{//si la lista NO está vacía
      Nodo temp = cabeza;//Nodo temporal ahora será la cabeza
      while(temp.siguiente != null){//mientras el apuntador siguiente del nodo temp sea diferente de null (osea que no haya llegado al final de la lista enlazada)
        temp = temp.siguiente;//temp será igual al siguiente nodo hasta que llegue al final de la lista
      }
      temp.siguiente = nuevo;//cuando llegue al final, nuevo es asignado como el que ocupa el final de la lista
    }
  }

  public void buscar(int dato){//creamos el metodo buscar
    Nodo temp = cabeza;//Nodo temporal ahora será la cabeza
    while(temp != null){//mientras la lista no esté vacía, recorrer la lista desde el inicio hasta el final
     //abrimos un proceso de verificación con if else para el cada nodo dentro del while
      if(temp.dato == dato){
        System.out.println("Encontramos el dato.");
        return;//solo salimos del ciclo cuando encontramos el dato
      }
      temp = temp.siguiente;//después del proceso de verificacion con uno de los nodos, seguimos al siguiente nodo y hacemos lo mismo
    }
    System.out.println("No encontramos el dato.");
  }
}

//1. ETAPA PROYECTO: Ahora vamos a adaptar lo que acabamos de hacer con la lista enlazada pero para el proyecto de gesto de libros
public class Libro{
  private String categoria;//atributos de la clase libro
  private String autor;
  private String titulo;

  public Libro(String categoria, String autor, String titulo){//constructor de la clase Libro
    this.categoria = categoria;
    this.autor = autor;
    this.titulo = titulo;
  }
  //setters
  public void setCategoria(String categoria){
    this.categoria = categoria;
  }
  public void setAutor(String autor){
    this.autor = autor;
  }
  public void setTitulo(String titulo){
    this.titulo = titulo;
  }
  //getters
  public String getCategoria(){
    return categoria;
  }
  public String getAutor(){
    return autor;
  }
  public String getTitulo(){
    return titulo;
  }
}


//2. ETAPA PROYECTO: Ahora crearemos una clase Nodo para el arbol

public class Nodo{//clase nodo para el arbol
  private Libro libro;//atributo libro de tipo Libro
  private Nodo izquierda;//nodo hijo referencia izquierda
  private Nodo derecha;//nodo hijo referencia derecha

  public Nodo(Libro libro){
    this.libro = libro;
    this.izquierda = null;//apunta a null inicialmente (no hay otros libros nodo por la izquierda)
    this.derecha = null;//apunta a null inicialmente (no hay otros libros nodo por la derecha)
  }
  //Para acceder al contenido de Libro de un nodo, navegar y modificar los hijos (ramas izquierda y derecha), ponemos getters y stters
  //setters
  public void setLibro(Libro libro){
    this.libro = libro;
  }
  public void setIzquierda(Nodo izquierda){
    this.izquierda = izquierda;
  }
  public void setDerecha(Nodo derecha){
    this.derecha = derecha;
  }
  //getters
  public Libro getLibro(){
    return libro;
  }
  public Nodo getIzquierda(){
    return izquierda;
  }  
  public Nodo getDerecha(){
    return derecha;
  }
}

//3.ETAPA DEL PROYECTO: ahora necesitamos crear un Arbol binario de busqueda, a partir de lo que tenemos ya creado con clase Nodo y Libro
public class ArbolDeLibros{
  private Nodo raiz;//atributo raiz de tipo nodo para nuestro arbol

  public ArbolDeLibros(){
    this.raiz = null;//el arbol al incio esta vacio, entonces el constructor asigna null para un arbol vacio, que es lo que se quiere
  }
  //métodos insertar
  public void insertar(Libro libro){//este es el metodo que usaremos para agregar libros al arbol
    raiz = insertarFormaRecursiva(raiz, libro);      
    }
  private Nodo insertarFormaRecursiva(Nodo actual, Libro libro){//creamos un metodo auxiliar recursivo para buscar el lugar correcto en el arbol donde insertar el nuevo libro
  
  }
}
