//Voy a iniciar desde cero a crear un nodo y una lista enlazada, para adaptarlo luego
public class Nodo{ //creamos clase nodo
  private int dato; //creamos un atributo de Nodo tipo entero llamado dato
  private Nodo siguiente; //creamos un atributo de Nodo tipo Nodo llamado siguiente, que apunta al próximo nodo

  public Nodo(int dato){ //constructor de la clase Nodo, recibe como parámetro al dato
    this.dato = dato; //inicializamos dato
    this.siguiente = null; //inicializamos siguiente a nulo
  }
}

//Voy a crear mi lista enlazada en esta sección, usando mi nodo recién creado
public class ListaEnlazada{ //creamos la clase, lista enlazada
  private Nodo cabeza; //creamos el atributo tipo Nodo llamado cabeza

  public ListaEnlazada(){ //constructor de la clase lista enlazada
    this.cabeza = null; //incializamos cabeza en nulo para indicar que la lista está vacía al principio
  }

  public void insertar(int dato){ //creamos el metodo insertar
    Nodo nuevo = new Nodo(dato);// agregamos el nuevo nodo que vamos a insertar
    
    if(cabeza == null){//Si la lista está vacía
      cabeza = nuevo; //El nodo nuevo se asigna como nodo cabeza
      }
    else{//si la lista NO está vacía
      Nodo temp = cabeza;//Nodo temporal ahora será la cabeza
      while(temp.siguiente != null){//mientras el apuntador siguiente del nodo temp sea diferente de null (osea que no haya llegado al final de la lista enlazada)
        temp = temp.siguiente;//temp será igual al siguiente nodo hasta que llegue al final de la lista
      }
      temp.siguiente = nuevo;//cuando llegue al final, nuevo es asignado como el que ocupa el final de la lista
    }
  }

  public void buscar(int dato){//creamos el metodo buscar
    Nodo temp = cabeza;//Nodo temporal ahora será la cabeza
    while(temp != null){//mientras la lista no esté vacía, recorrer la lista desde el inicio hasta el final
     //abrimos un proceso de verificación con if else para el cada nodo dentro del while
      if(temp.dato == dato){
        System.out.println("Encontramos el dato.");
        return;//solo salimos del ciclo cuando encontramos el dato
      }
      temp = temp.siguiente;//después del proceso de verificacion con uno de los nodos, seguimos al siguiente nodo y hacemos lo mismo
    }
    System.out.println("No encontramos el dato.");
  }
}

//1. ETAPA PROYECTO: Ahora vamos a adaptar lo que acabamos de hacer con la lista enlazada pero para el proyecto de gesto de libros
public class Libro{
  private String categoria;//atributos de la clase libro
  private String autor;
  private String titulo;

  public Libro(String categoria, String autor, String titulo){//constructor de la clase Libro
    this.categoria = categoria;
    this.autor = autor;
    this.titulo = titulo;
  }
  //setters
  public void setCategoria(String categoria){
    this.categoria = categoria;
  }
  public void setAutor(String autor){
    this.autor = autor;
  }
  public void setTitulo(String titulo){
    this.titulo = titulo;
  }
  //getters
  public String getCategoria(){
    return categoria;
  }
  public String getAutor(){
    return autor;
  }
  public String getTitulo(){
    return titulo;
  }
}


//2. ETAPA PROYECTO: Ahora crearemos una clase Nodo para el arbol

public class Nodo{//clase nodo para el arbol
  private Libro libro;//atributo libro de tipo Libro
  private Nodo izquierda;//nodo hijo referencia izquierda
  private Nodo derecha;//nodo hijo referencia derecha

  public Nodo(Libro libro){
    this.libro = libro;
    this.izquierda = null;//apunta a null inicialmente (no hay otros libros nodo por la izquierda)
    this.derecha = null;//apunta a null inicialmente (no hay otros libros nodo por la derecha)
  }
  //Para acceder al contenido de Libro de un nodo, navegar y modificar los hijos (ramas izquierda y derecha), ponemos getters y stters
  //setters
  public void setLibro(Libro libro){
    this.libro = libro;
  }
  public void setIzquierda(Nodo izquierda){
    this.izquierda = izquierda;
  }
  public void setDerecha(Nodo derecha){
    this.derecha = derecha;
  }
  //getters
  public Libro getLibro(){
    return libro;
  }
  public Nodo getIzquierda(){
    return izquierda;
  }  
  public Nodo getDerecha(){
    return derecha;
  }
}

//3.ETAPA DEL PROYECTO: ahora necesitamos crear un Arbol binario de busqueda, a partir de lo que tenemos ya creado con clase Nodo y Libro
public class ArbolDeLibros {
  private Nodo raiz; // Nodo raíz del árbol, inicializa con null cuando está vacío
  private String criterio; // Criterio para ordenar por "categoria", "autor" o "titulo"

  // Constructor recibe el criterio para ordenar el árbol
  public ArbolDeLibros(String criterio) {
    this.raiz = null; // árbol vacío al inicio
    this.criterio = criterio.toLowerCase(); // guardamos criterio en minúscula para evitar errores
  }

  // Método para comparar dos libros según el criterio seleccionado
  private int comparar(Libro libro1, Libro libro2) {
    switch (criterio) {
      case "categoria":
        // Comparamos las categorías ignorando mayúsculas/minúsculas
        return libro1.getCategoria().compareToIgnoreCase(libro2.getCategoria());
      case "autor":
        // Comparamos los autores ignorando mayúsculas/minúsculas
        return libro1.getAutor().compareToIgnoreCase(libro2.getAutor());
      case "titulo":
      default:
        // Comparamos los títulos ignorando mayúsculas/minúsculas (por defecto)
        return libro1.getTitulo().compareToIgnoreCase(libro2.getTitulo());
    }
  }

  // Método público para insertar un libro en el árbol
  public void insertar(Libro libro) {
    // Llama a método recursivo para encontrar la posición correcta y actualizar el árbol
    raiz = insertarFormaRecursiva(raiz, libro);
  }

  // Método privado recursivo que inserta el libro en la posición correcta
  private Nodo insertarFormaRecursiva(Nodo actual, Libro libro) {
    if (actual == null) {
      // Caso base: si llegamos a un nodo vacío, creamos un nuevo nodo con el libro
      return new Nodo(libro);
    }

    // Comparamos el libro a insertar con el libro en el nodo actual según el criterio
    int comparacion = comparar(libro, actual.getLibro());

    if (comparacion < 0) {
      // Si el libro a insertar es menor, vamos a la rama izquierda recursivamente
      actual.setIzquierda(insertarFormaRecursiva(actual.getIzquierda(), libro));
    } else if (comparacion > 0) {
      // Si el libro a insertar es mayor, vamos a la rama derecha recursivamente
      actual.setDerecha(insertarFormaRecursiva(actual.getDerecha(), libro));
    } else {
      // Si son iguales (según el criterio), no insertamos duplicados
      System.out.println("El libro ya existe en el árbol según el criterio \"" + criterio + "\".");
    }

    // Retornamos el nodo actual actualizado para mantener el enlace con el padre
    return actual;
  }

  // Método público para buscar un libro con valor exacto según el criterio
  public Libro buscarExacto(String valorBuscado) {
    // Convierte valor buscado a minúscula para comparación consistente
    return buscarExactoRecursivo(raiz, valorBuscado.toLowerCase());
  }

  // Método privado recursivo para buscar un libro exacto
  private Libro buscarExactoRecursivo(Nodo actual, String valorBuscado) {
    if (actual == null) {
      // Si nodo actual es null, no se encontró el libro
      return null;
    }

    // Obtener el valor del nodo actual según el criterio y en minúscula
    String valorNodo;
    switch (criterio) {
      case "categoria":
        valorNodo = actual.getLibro().getCategoria().toLowerCase();
        break;
      case "autor":
        valorNodo = actual.getLibro().getAutor().toLowerCase();
        break;
      case "titulo":
      default:
        valorNodo = actual.getLibro().getTitulo().toLowerCase();
        break;
    }

    // Comparamos el valor buscado con el valor del nodo actual
    int comparacion = valorBuscado.compareTo(valorNodo);

    if (comparacion == 0) {
      // Si coinciden exactamente, retornamos el libro
      return actual.getLibro();
    } else if (comparacion < 0) {
      // Si el valor buscado es menor, buscamos en la rama izquierda
      return buscarExactoRecursivo(actual.getIzquierda(), valorBuscado);
    } else {
      // Si es mayor, buscamos en la rama derecha
      return buscarExactoRecursivo(actual.getDerecha(), valorBuscado);
    }
  }

  // Método público para buscar libros cuyo valor comienza con un prefijo
  public List<Libro> buscarPorPrefijo(String prefijo) {
    List<Libro> resultado = new ArrayList<>(); // Lista donde guardaremos los libros que coincidan
    buscarPorPrefijoRecursivo(raiz, prefijo.toLowerCase(), resultado); // Llamamos método recursivo
    return resultado; // Retornamos la lista con resultados
  }

  // Método privado recursivo para buscar libros que comienzan con el prefijo
  private void buscarPorPrefijoRecursivo(Nodo actual, String prefijo, List<Libro> resultado) {
    if (actual == null) {
      // Si nodo es null, no hay nada que buscar
      return;
    }

    // Obtenemos el valor del nodo actual según el criterio, en minúscula para comparar
    String valorNodo;
    switch (criterio) {
      case "categoria":
        valorNodo = actual.getLibro().getCategoria().toLowerCase();
        break;
      case "autor":
        valorNodo = actual.getLibro().getAutor().toLowerCase();
        break;
      case "titulo":
      default:
        valorNodo = actual.getLibro().getTitulo().toLowerCase();
        break;
    }

    // Si el valor del nodo empieza con el prefijo
    if (valorNodo.startsWith(prefijo)) {
      // Agregamos el libro a la lista de resultados
      resultado.add(actual.getLibro());

      // Buscamos en ambas ramas porque puede haber más coincidencias a izquierda y derecha
      buscarPorPrefijoRecursivo(actual.getIzquierda(), prefijo, resultado);
      buscarPorPrefijoRecursivo(actual.getDerecha(), prefijo, resultado);

    } else {
      // Si el valor del nodo es mayor que el prefijo (alfabéticamente),
      // buscamos solo en la rama izquierda porque ahí están los valores menores
      if (valorNodo.compareTo(prefijo) > 0) {
        buscarPorPrefijoRecursivo(actual.getIzquierda(), prefijo, resultado);
      } else {
        // Si el valor es menor, buscamos solo en la rama derecha
        buscarPorPrefijoRecursivo(actual.getDerecha(), prefijo, resultado);
      }
    }
  }
}
